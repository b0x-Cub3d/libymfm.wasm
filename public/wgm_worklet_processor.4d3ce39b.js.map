{"mappings":"ACOA,MAAM,UAA4B,sBAM9B,YAAY,CAAO,CAAE,CACjB,KAAK,GAEL,IAAI,CAAC,KAAO,CAAA,EACZ,IAAI,CAAC,SAAW,KAChB,IAAI,CAAC,eAAiB,KACtB,IAAI,CAAC,UAAY,KACjB,IAAI,CAAC,WAAa,KAClB,IAAI,CAAC,WAAa,EAAQ,iBAAiB,WAE3C,IAAI,CAAC,MAAQ,EAAE,CACf,IAAI,CAAC,MAAQ,EAAE,CACf,IAAI,IAAI,EAAI,EAAG,ECnBU,EDmBiB,IACtC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAG,IAAI,aAAa,EAAQ,iBAAiB,KAAK,CAAC,EAAE,EAClE,IAAI,CAAC,KAAK,CAAC,EAAE,CAAG,IAAI,aAAa,EAAQ,iBAAiB,KAAK,CAAC,EAAE,CAEtE,CAAA,IAAI,CAAC,OAAS,IAAI,WAAW,EAAQ,iBAAiB,QAEtD,IAAI,CAAC,KAAK,UAAY,AAAC,GAAU,IAAI,CAAC,SAAS,EACnD,CAUA,QAAQ,CAAM,CAAE,CAAO,CAAE,CAAU,CAAE,CAEjC,GAAG,CAAC,IAAI,CAAC,KAAM,MAAO,CAAA,CAGnB,CAAA,IAAI,CAAC,UAAY,IAAI,CAAC,iBACrB,QAAQ,MAAM,IAAI,CAAC,OCtCC,EDsC6B,IAAI,CAAC,UACtD,QAAQ,OAAO,IAAI,CAAC,OCvCA,EDuCkD,GACtE,IAAI,CAAC,eAAiB,IAAI,CAAC,UAG/B,IAAI,EAAS,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAClC,EAAS,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAGlC,EAAU,ACrDsB,IDqDtB,IAAI,CAAC,UA6BnB,OA5BA,CAAO,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,EAAO,MAAM,EAAS,ECtDJ,MDuDpC,CAAO,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,EAAO,MAAM,EAAS,ECvDJ,MD0DpC,IAAI,CAAC,YAEF,IAAI,CAAC,WAAa,IAAI,CAAC,aAEnB,AAAuC,GAAvC,IAAI,CAAC,MAAM,CCvDQ,EDuDgB,EAC/B,IAAI,CAAC,MAAM,CCxDI,EDwDoB,EAAI,IAAI,CAAC,YAC/C,IAAI,CAAC,KAAO,CAAA,EACZ,IAAI,CAAC,KAAK,YAAY,CAAC,QAAW,WAAY,KAAQ,WAAW,IAClB,GAAzC,IAAI,CAAC,MAAM,CC1DG,ED0DuB,EACxC,IAAI,CAAC,MAAM,CC3DM,ED2DoB,EAAI,IAAI,CAAC,YAEjD,IAAI,CAAC,KAAK,YAAY,CAAC,QAAW,SAAS,GAG/C,IAAI,CAAC,WACF,IAAI,CAAC,UCvEa,GDwEjB,CAAA,IAAI,CAAC,SAAW,CAAA,EAGpB,IAAI,CAAC,UAAY,EAEjB,IAAI,CAAC,cAGF,CAAA,CACX,CAOA,MAAM,SAAS,CAAK,CAAE,CAClB,OAAO,EAAM,KAAK,SACd,IAAK,OAED,IAAI,CAAC,SAAW,EAChB,IAAI,CAAC,eAAiB,KACtB,IAAI,CAAC,WAAa,EAClB,IAAI,CAAC,UAAY,EAEjB,IAAI,CAAC,KAAO,CAAA,EACZ,KAEJ,KAAK,OACD,IAAI,CAAC,KAAO,CAAA,EACZ,QAAQ,MAAM,IAAI,CAAC,OClGH,EAHK,KDsGrB,QAAQ,OAAO,IAAI,CAAC,OCnGJ,EDmGsD,GACtE,IAAI,CAAC,KAAK,YAAY,CAAC,QAAW,WAAY,KAAQ,YAAY,EAE1E,CACJ,CACJ,CAEA,kBAAkB,wBAAyB","sources":["<anon>","src/js/wgm_worklet_processor.js","src/js/const.js"],"sourcesContent":["// license:BSD-3-Clause\n// copyright-holders:Hiromasa Tanaka\n// license:BSD-3-Clause\n// copyright-holders:Hiromasa Tanaka\n// Audio\nconst $cf63ac6189aa9433$export$82474fc2c4d8bff0 = 128;\nconst $cf63ac6189aa9433$export$6a88b8329b4d35e5 = 768;\nconst $cf63ac6189aa9433$export$2497303df528ce88 = 4;\nconst $cf63ac6189aa9433$export$ffb92b2c1007a737 = 999;\nconst $cf63ac6189aa9433$export$aa5620a1095cbc3 = 0;\nconst $cf63ac6189aa9433$export$686712ca8e49fc53 = 1;\nconst $cf63ac6189aa9433$export$8d600c44ffe6cb9e = 2;\n\n\n/**\n * WgmWorkletProcessor\n */ class $461dde0c7a831a0b$var$WgmWorkletProcessor extends AudioWorkletProcessor {\n    /**\n     * Constructor\n     *\n     * @param {*} options\n     */ constructor(options){\n        super();\n        // instance status\n        this.play = false;\n        this.playring = null;\n        this.playringBefore = null;\n        this.chunkStep = null;\n        this.chunkCount = null;\n        this.chunkSteps = options.processorOptions.chunkSteps;\n        // shared memory\n        this.ringL = [];\n        this.ringR = [];\n        for(let i = 0; i < $cf63ac6189aa9433$export$2497303df528ce88; i++){\n            this.ringL[i] = new Float32Array(options.processorOptions.ringL[i]);\n            this.ringR[i] = new Float32Array(options.processorOptions.ringR[i]);\n        }\n        this.status = new Int32Array(options.processorOptions.status);\n        // message dispatch\n        this.port.onmessage = (event)=>this.dispatch(event);\n    }\n    /**\n     * Waveform generation process\n     *\n     * @param {*} inputs\n     * @param {*} outputs\n     * @param {*} parameters\n     * @return {boolean} next stage\n     */ process(inputs, outputs, parameters) {\n        // stop music\n        if (!this.play) return true;\n        // notify buffering next ring\n        if (this.playring != this.playringBefore) {\n            Atomics.store(this.status, $cf63ac6189aa9433$export$aa5620a1095cbc3, this.playring);\n            Atomics.notify(this.status, $cf63ac6189aa9433$export$aa5620a1095cbc3, /* watcher count */ 1);\n            this.playringBefore = this.playring;\n        }\n        let chunkL = this.ringL[this.playring];\n        let chunkR = this.ringR[this.playring];\n        // set sampling\n        let pointer = this.chunkStep * $cf63ac6189aa9433$export$82474fc2c4d8bff0;\n        outputs[0][0].set(chunkL.slice(pointer, pointer + $cf63ac6189aa9433$export$82474fc2c4d8bff0));\n        outputs[0][1].set(chunkR.slice(pointer, pointer + $cf63ac6189aa9433$export$82474fc2c4d8bff0));\n        // step chunk step per AudioWorklet chunk\n        this.chunkStep++;\n        // next chunk\n        if (this.chunkStep >= this.chunkSteps) {\n            // end of music\n            if (this.status[$cf63ac6189aa9433$export$686712ca8e49fc53] != 0 && this.status[$cf63ac6189aa9433$export$686712ca8e49fc53] <= this.chunkCount) {\n                this.play = false;\n                this.port.postMessage({\n                    \"message\": \"callback\",\n                    \"data\": \"endofplay\"\n                });\n            } else if (this.status[$cf63ac6189aa9433$export$8d600c44ffe6cb9e] != 0 && this.status[$cf63ac6189aa9433$export$8d600c44ffe6cb9e] <= this.chunkCount) // feedout\n            this.port.postMessage({\n                \"message\": \"feedout\"\n            });\n            // change ring\n            this.playring++;\n            if (this.playring >= $cf63ac6189aa9433$export$2497303df528ce88) this.playring = 0;\n            // clear chunk step\n            this.chunkStep = 0;\n            // count chunk\n            this.chunkCount++;\n        }\n        return true;\n    }\n    /**\n     * Message dispatcher\n     *\n     * @param {*} event\n     */ async dispatch(event) {\n        switch(event.data.message){\n            case \"play\":\n                // init status\n                this.playring = 0;\n                this.playringBefore = null;\n                this.chunkCount = 1; // 1:first buffer\n                this.chunkStep = 0;\n                // start play\n                this.play = true;\n                break;\n            case \"stop\":\n                this.play = false;\n                Atomics.store(this.status, $cf63ac6189aa9433$export$aa5620a1095cbc3, $cf63ac6189aa9433$export$ffb92b2c1007a737);\n                Atomics.notify(this.status, $cf63ac6189aa9433$export$aa5620a1095cbc3, /* watcher count */ 1);\n                this.port.postMessage({\n                    \"message\": \"callback\",\n                    \"data\": \"clear wait\"\n                });\n        }\n    }\n}\nregisterProcessor(\"wgm-worklet-processor\", $461dde0c7a831a0b$var$WgmWorkletProcessor);\n\n\n//# sourceMappingURL=wgm_worklet_processor.4d3ce39b.js.map\n","// license:BSD-3-Clause\n// copyright-holders:Hiromasa Tanaka\nimport * as def from './const.js'\n\n/**\n * WgmWorkletProcessor\n */\nclass WgmWorkletProcessor extends AudioWorkletProcessor {\n    /**\n     * Constructor\n     *\n     * @param {*} options\n     */\n    constructor(options) {\n        super();\n        // instance status\n        this.play = false;\n        this.playring = null;\n        this.playringBefore = null;\n        this.chunkStep = null;\n        this.chunkCount = null;\n        this.chunkSteps = options.processorOptions.chunkSteps;\n        // shared memory\n        this.ringL = [];\n        this.ringR = [];\n        for(let i = 0; i < def.BUFFER_RING_COUNT; i++) {\n            this.ringL[i] = new Float32Array(options.processorOptions.ringL[i]);\n            this.ringR[i] = new Float32Array(options.processorOptions.ringR[i]);\n        }\n        this.status = new Int32Array(options.processorOptions.status);\n        // message dispatch\n        this.port.onmessage = (event) => this.dispatch(event);\n    }\n\n    /**\n     * Waveform generation process\n     *\n     * @param {*} inputs\n     * @param {*} outputs\n     * @param {*} parameters\n     * @return {boolean} next stage\n     */\n    process(inputs, outputs, parameters) { // eslint-disable-line no-unused-vars\n        // stop music\n        if(!this.play) return true;\n\n        // notify buffering next ring\n        if(this.playring != this.playringBefore) {\n            Atomics.store(this.status, def.NOW_PLAYING_RING, this.playring);\n            Atomics.notify(this.status, def.NOW_PLAYING_RING, /* watcher count */ 1);\n            this.playringBefore = this.playring;\n        }\n\n        let chunkL = this.ringL[this.playring];\n        let chunkR = this.ringR[this.playring];\n\n        // set sampling\n        let pointer = this.chunkStep * def.AUDIO_WORKLET_SAMPLING_CHUNK;\n        outputs[0][0].set(chunkL.slice(pointer, pointer + def.AUDIO_WORKLET_SAMPLING_CHUNK));\n        outputs[0][1].set(chunkR.slice(pointer, pointer + def.AUDIO_WORKLET_SAMPLING_CHUNK));\n\n        // step chunk step per AudioWorklet chunk\n        this.chunkStep++;\n        // next chunk\n        if(this.chunkStep >= this.chunkSteps) {\n            // end of music\n            if(this.status[def.END_OF_MUSIC_CHUNK] != 0\n                && this.status[def.END_OF_MUSIC_CHUNK] <= this.chunkCount) {\n                this.play = false;\n                this.port.postMessage({\"message\": \"callback\", \"data\": \"endofplay\"});\n            } else if(this.status[def.FEED_OUT_START_CHUNK] != 0\n                && this.status[def.FEED_OUT_START_CHUNK] <= this.chunkCount) {\n                // feedout\n                this.port.postMessage({\"message\": \"feedout\"});\n            }\n            // change ring\n            this.playring++;\n            if(this.playring >= def.BUFFER_RING_COUNT) {\n                this.playring = 0;\n            }\n            // clear chunk step\n            this.chunkStep = 0;\n            // count chunk\n            this.chunkCount++;\n        }\n\n        return true;\n    }\n\n    /**\n     * Message dispatcher\n     *\n     * @param {*} event\n     */\n    async dispatch(event) {\n        switch(event.data.message) {\n            case 'play': {\n                // init status\n                this.playring = 0;\n                this.playringBefore = null;\n                this.chunkCount = 1; // 1:first buffer\n                this.chunkStep = 0;\n                // start play\n                this.play = true;\n                break;\n            }\n            case 'stop': {\n                this.play = false;\n                Atomics.store(this.status, def.NOW_PLAYING_RING, def.INIT_NOW_PLAYING_RING);\n                Atomics.notify(this.status, def.NOW_PLAYING_RING, /* watcher count */ 1);\n                this.port.postMessage({\"message\": \"callback\", \"data\": \"clear wait\"});\n            }\n        }\n    }\n}\n\nregisterProcessor('wgm-worklet-processor', WgmWorkletProcessor);\n","// license:BSD-3-Clause\n// copyright-holders:Hiromasa Tanaka\n\n// Audio\nexport const AUDIO_WORKLET_SAMPLING_CHUNK = 128;\nexport const BUFFERING_CHUNK_COUNT = 768;\nexport const BUFFER_RING_COUNT = 4;\nexport const INIT_NOW_PLAYING_RING = 999;\n\n// Status SharedBuffer\nexport const NOW_PLAYING_RING = 0;\nexport const END_OF_MUSIC_CHUNK = 1;\nexport const FEED_OUT_START_CHUNK = 2;\n"],"names":["$461dde0c7a831a0b$var$WgmWorkletProcessor","AudioWorkletProcessor","constructor","options","play","playring","playringBefore","chunkStep","chunkCount","chunkSteps","processorOptions","ringL","ringR","i","Float32Array","status","Int32Array","port","onmessage","event","dispatch","process","inputs","outputs","parameters","Atomics","store","notify","chunkL","chunkR","pointer","set","slice","postMessage","data","message","registerProcessor"],"version":3,"file":"wgm_worklet_processor.4d3ce39b.js.map"}