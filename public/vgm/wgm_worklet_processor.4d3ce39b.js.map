{"mappings":"AAMG,MACGA,UAA4BC,sBAK3BC,YACSC,GACRC,QAEAC,KAAKC,MAAO,EACZD,KAAKE,SAAW,KAChBF,KAAKG,eAAiB,KACtBH,KAAKI,UAAY,KACjBJ,KAAKK,WAAa,KAClBL,KAAKM,WAAaR,EAAQS,iBAAiBD,WAE3CN,KAAKQ,MAAQ,GACbR,KAAKS,MAAQ,GACb,IAAI,IAAIC,EAAI,EAAGA,ECnBU,EDmBiBA,IACtCV,KAAKQ,MAAME,GAAK,IAAIC,aAAab,EAAQS,iBAAiBC,MAAME,IAChEV,KAAKS,MAAMC,GAAK,IAAIC,aAAab,EAAQS,iBAAiBE,MAAMC,IAEpEV,KAAKY,OAAS,IAAIC,WAAWf,EAAQS,iBAAiBK,QAEtDZ,KAAKc,KAAKC,UAAaC,GAAUhB,KAAKiB,SAASD,GAWnDE,QAAQC,EAAQC,EAASC,GAErB,IAAIrB,KAAKC,KAAM,OAAO,EAGnBD,KAAKE,UAAYF,KAAKG,iBACrBmB,QAAQC,MAAMvB,KAAKY,OCtCC,EDsC6BZ,KAAKE,UACtDoB,QAAQE,OAAOxB,KAAKY,OCvCA,EDuCkD,GACtEZ,KAAKG,eAAiBH,KAAKE,UAG/B,IAAIuB,EAASzB,KAAKQ,MAAMR,KAAKE,UACzBwB,EAAS1B,KAAKS,MAAMT,KAAKE,UAGzByB,ECrDgC,IDqDtB3B,KAAKI,UA6BnB,OA5BAgB,EAAQ,GAAG,GAAGQ,IAAIH,EAAOI,MAAMF,EAASA,ECtDJ,MDuDpCP,EAAQ,GAAG,GAAGQ,IAAIF,EAAOG,MAAMF,EAASA,ECvDJ,MD0DpC3B,KAAKI,YAEFJ,KAAKI,WAAaJ,KAAKM,aAEoB,GAAvCN,KAAKY,OCvDc,IDwDfZ,KAAKY,OCxDU,IDwDwBZ,KAAKK,YAC/CL,KAAKC,MAAO,EACZD,KAAKc,KAAKgB,YAAY,CAACC,QAAW,WAAYC,KAAQ,eACP,GAAzChC,KAAKY,OC1DS,ID2DjBZ,KAAKY,OC3DY,ID2DwBZ,KAAKK,YAEjDL,KAAKc,KAAKgB,YAAY,CAACC,QAAW,YAGtC/B,KAAKE,WACFF,KAAKE,UCvEa,IDwEjBF,KAAKE,SAAW,GAGpBF,KAAKI,UAAY,EAEjBJ,KAAKK,eAGF,EAOR4B,eACYjB,GACX,OAAOA,EAAMgB,KAAKD,SACd,IAAK,OAED/B,KAAKE,SAAW,EAChBF,KAAKG,eAAiB,KACtBH,KAAKK,WAAa,EAClBL,KAAKI,UAAY,EAEjBJ,KAAKC,MAAO,EACZ,MAEJ,IAAK,OACDD,KAAKC,MAAO,EACZqB,QAAQC,MAAMvB,KAAKY,OClGH,EAHK,KDsGrBU,QAAQE,OAAOxB,KAAKY,OCnGJ,EDmGsD,GACtEZ,KAAKc,KAAKgB,YAAY,CAACC,QAAW,WAAYC,KAAQ,iBAMtEE,kBAAkB,wBAAyBvC","sources":["src/js/wgm_worklet_processor.js","src/js/const.js"],"sourcesContent":["// license:BSD-3-Clause\n// copyright-holders:Hiromasa Tanaka\nimport * as def from './const.js'\n\n/**\n * WgmWorkletProcessor\n */\nclass WgmWorkletProcessor extends AudioWorkletProcessor {\n    /**\n     * Constructor\n     *\n     * @param {*} options\n     */\n    constructor(options) {\n        super();\n        // instance status\n        this.play = false;\n        this.playring = null;\n        this.playringBefore = null;\n        this.chunkStep = null;\n        this.chunkCount = null;\n        this.chunkSteps = options.processorOptions.chunkSteps;\n        // shared memory\n        this.ringL = [];\n        this.ringR = [];\n        for(let i = 0; i < def.BUFFER_RING_COUNT; i++) {\n            this.ringL[i] = new Float32Array(options.processorOptions.ringL[i]);\n            this.ringR[i] = new Float32Array(options.processorOptions.ringR[i]);\n        }\n        this.status = new Int32Array(options.processorOptions.status);\n        // message dispatch\n        this.port.onmessage = (event) => this.dispatch(event);\n    }\n\n    /**\n     * Waveform generation process\n     *\n     * @param {*} inputs\n     * @param {*} outputs\n     * @param {*} parameters\n     * @return {boolean} next stage\n     */\n    process(inputs, outputs, parameters) { // eslint-disable-line no-unused-vars\n        // stop music\n        if(!this.play) return true;\n\n        // notify buffering next ring\n        if(this.playring != this.playringBefore) {\n            Atomics.store(this.status, def.NOW_PLAYING_RING, this.playring);\n            Atomics.notify(this.status, def.NOW_PLAYING_RING, /* watcher count */ 1);\n            this.playringBefore = this.playring;\n        }\n\n        let chunkL = this.ringL[this.playring];\n        let chunkR = this.ringR[this.playring];\n\n        // set sampling\n        let pointer = this.chunkStep * def.AUDIO_WORKLET_SAMPLING_CHUNK;\n        outputs[0][0].set(chunkL.slice(pointer, pointer + def.AUDIO_WORKLET_SAMPLING_CHUNK));\n        outputs[0][1].set(chunkR.slice(pointer, pointer + def.AUDIO_WORKLET_SAMPLING_CHUNK));\n\n        // step chunk step per AudioWorklet chunk\n        this.chunkStep++;\n        // next chunk\n        if(this.chunkStep >= this.chunkSteps) {\n            // end of music\n            if(this.status[def.END_OF_MUSIC_CHUNK] != 0\n                && this.status[def.END_OF_MUSIC_CHUNK] <= this.chunkCount) {\n                this.play = false;\n                this.port.postMessage({\"message\": \"callback\", \"data\": \"endofplay\"});\n            } else if(this.status[def.FEED_OUT_START_CHUNK] != 0\n                && this.status[def.FEED_OUT_START_CHUNK] <= this.chunkCount) {\n                // feedout\n                this.port.postMessage({\"message\": \"feedout\"});\n            }\n            // change ring\n            this.playring++;\n            if(this.playring >= def.BUFFER_RING_COUNT) {\n                this.playring = 0;\n            }\n            // clear chunk step\n            this.chunkStep = 0;\n            // count chunk\n            this.chunkCount++;\n        }\n\n        return true;\n    }\n\n    /**\n     * Message dispatcher\n     *\n     * @param {*} event\n     */\n    async dispatch(event) {\n        switch(event.data.message) {\n            case 'play': {\n                // init status\n                this.playring = 0;\n                this.playringBefore = null;\n                this.chunkCount = 1; // 1:first buffer\n                this.chunkStep = 0;\n                // start play\n                this.play = true;\n                break;\n            }\n            case 'stop': {\n                this.play = false;\n                Atomics.store(this.status, def.NOW_PLAYING_RING, def.INIT_NOW_PLAYING_RING);\n                Atomics.notify(this.status, def.NOW_PLAYING_RING, /* watcher count */ 1);\n                this.port.postMessage({\"message\": \"callback\", \"data\": \"clear wait\"});\n            }\n        }\n    }\n}\n\nregisterProcessor('wgm-worklet-processor', WgmWorkletProcessor);\n","// license:BSD-3-Clause\n// copyright-holders:Hiromasa Tanaka\n\n// Audio\nexport const AUDIO_WORKLET_SAMPLING_CHUNK = 128;\nexport const BUFFERING_CHUNK_COUNT = 768;\nexport const BUFFER_RING_COUNT = 4;\nexport const INIT_NOW_PLAYING_RING = 999;\n\n// Status SharedBuffer\nexport const NOW_PLAYING_RING = 0;\nexport const END_OF_MUSIC_CHUNK = 1;\nexport const FEED_OUT_START_CHUNK = 2;\n"],"names":["$461dde0c7a831a0b$var$WgmWorkletProcessor","AudioWorkletProcessor","constructor","options","super","this","play","playring","playringBefore","chunkStep","chunkCount","chunkSteps","processorOptions","ringL","ringR","i","Float32Array","status","Int32Array","port","onmessage","event","dispatch","process","inputs","outputs","parameters","Atomics","store","notify","chunkL","chunkR","pointer","set","slice","postMessage","message","data","async","registerProcessor"],"version":3,"file":"wgm_worklet_processor.4d3ce39b.js.map"}