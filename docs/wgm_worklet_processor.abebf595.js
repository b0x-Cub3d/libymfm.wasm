class s extends AudioWorkletProcessor{constructor(s){super(),this.play=!1,this.playring=null,this.playringBefore=null,this.chunkStep=null,this.chunkCount=null,this.chunkSteps=s.processorOptions.chunkSteps,this.ringL=[],this.ringR=[];for(let t=0;t<4;t++)this.ringL[t]=new Float32Array(s.processorOptions.ringL[t]),this.ringR[t]=new Float32Array(s.processorOptions.ringR[t]);this.status=new Int32Array(s.processorOptions.status),this.port.onmessage=s=>this.dispatch(s)}process(s,t,i){if(!this.play)return!0;this.playring!=this.playringBefore&&(Atomics.store(this.status,0,this.playring),Atomics.notify(this.status,0,1),this.playringBefore=this.playring);let h=this.ringL[this.playring],e=this.ringR[this.playring],r=128*this.chunkStep;return t[0][0].set(h.slice(r,r+128)),t[0][1].set(e.slice(r,r+128)),this.chunkStep++,this.chunkStep>=this.chunkSteps&&(0!=this.status[1]&&this.status[1]<=this.chunkCount?(this.play=!1,this.port.postMessage({message:"callback",data:"endofplay"})):0!=this.status[2]&&this.status[2]<=this.chunkCount&&this.port.postMessage({message:"feedout"}),this.playring++,this.playring>=4&&(this.playring=0),this.chunkStep=0,this.chunkCount++),!0}async dispatch(s){switch(s.data.message){case"play":this.playring=0,this.playringBefore=null,this.chunkCount=1,this.chunkStep=0,this.play=!0;break;case"stop":this.play=!1,Atomics.store(this.status,0,999),Atomics.notify(this.status,0,1),this.port.postMessage({message:"callback",data:"clear wait"})}}}registerProcessor("wgm-worklet-processor",s);
//# sourceMappingURL=wgm_worklet_processor.abebf595.js.map
